#Использовать v8runner
#Использовать files-common
#Использовать cmdline

//пришлось скопировать из еще необновленной библиотеки ФС
Процедура ОбеспечитьКаталог(Знач Путь)
    Объект = Новый Файл(Путь);
    Если Не Объект.Существует() Тогда
        СоздатьКаталог(Путь);
    ИначеЕсли Объект.ЭтоКаталог() Тогда
        УдалитьФайлы(Путь, ПолучитьМаскуВсеФайлы());
    Иначе
        ВызватьИсключение "Не удается создать каталог " + Путь;
    КонецЕсли;
КонецПроцедуры

Функция КаталогСуществует(Знач Путь) Экспорт
    Объект = Новый Файл(Путь);
    Возврат Объект.Существует() и Объект.ЭтоКаталог();
КонецФункции

Процедура _ОбеспечитьКаталог(Знач Путь)
    Объект = Новый Файл(Путь);
    Если Не Объект.Существует() Тогда
        СоздатьКаталог(Путь);
    ИначеЕсли Объект.ЭтоКаталог() Тогда
        //УдалитьФайлы(Путь, ПолучитьМаскуВсеФайлы());
    Иначе
        ВызватьИсключение "Не удается создать каталог " + Путь;
    КонецЕсли;
КонецПроцедуры // ОбеспечитьКаталог()

Процедура КопироватьСодержимоеКаталога(Знач Откуда, Знач Куда) Экспорт
	_ОбеспечитьКаталог(Куда);
	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Процедура ЗагрузкаКонфигурацииИзФайлов(Знач КаталогВыгрузки, Знач Конф) 
	Параметры = Конф.ПолучитьПараметрыЗапуска();
	Параметры.Добавить(СтрШаблон("/LoadConfigFromFiles %1", ОбернутьВКавычки(КаталогВыгрузки)));
	Конф.ВыполнитьКоманду(Параметры);
КонецПроцедуры

Парсер = Новый ПарсерАргументовКоманднойСтроки();
Парсер.ДобавитьПараметр("testclone");

Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

Если ЗначениеЗаполнено(Параметры["testclone"]) Тогда
	Ветка = Параметры["testclone"];
Иначе
	Ветка = "\develop";
КонецЕсли;
Сообщить(Ветка);


_текущийКаталог = ТекущийКаталог()+Ветка;

_каталогБазыСборки = _текущийКаталог+"\1cbases\build";
_каталогБазыТемп = _текущийКаталог+"\1cbases\temp";
_каталогБазыРазработки = _текущийКаталог+"\1cbases\develop";
_установочнаяКонфигурация = _текущийКаталог+"\cfs\setup.cf";
_установочнаяВыгрузкаБазы = _текущийКаталог+"\cfs\setup.dt";
_обновлениеКонфигурация = _текущийКаталог+"\cfs\develop.cf";
_файлОбъединения = _текущийКаталог+"\MergeSettings.xml";
_каталогРабочийДляФайловВыгрузки = _текущийКаталог+"\src";
_каталогВременныйДляФайловВыгрузки = _текущийКаталог+"\xmltemp";

//Создаем чистую базу, загружаем типовую конфу и снимаем с поддержки
_началоЗамер = ТекущаяДата();
//создаем конфигурацию develop.cf
КонфигураторТемп = Новый УправлениеКонфигуратором();
КонфигураторТемп.СоздатьФайловуюБазу(_каталогБазыТемп);
Сообщить("Создал базу temp...");
КонфигураторТемп.УстановитьКонтекст("/F"+_каталогБазыТемп, "", "");
КонфигураторТемп.ЗагрузитьИнформационнуюБазу(_установочнаяВыгрузкаБазы);
Сообщить("Загрузил setup.dt...");
КонфигураторТемп.УстановитьКонтекст("/F"+_каталогБазыТемп, "admin", "");
КонфигураторТемп.СнятьКонфигурациюСПоддержки(Истина);
Сообщить("Снял с поддержки...");
КонфигураторТемп.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь);
Сообщить("Обновил...");
//выгружаем в файлы иерархически
КонфигураторТемп.ВыгрузитьКонфигурациюВФайлы(_каталогВременныйДляФайловВыгрузки);
Сообщить("Выгрузил в файлы...");
//сохраняем оригинальные исходники из репозитория
КопироватьСодержимоеКаталога(_каталогРабочийДляФайловВыгрузки, _каталогВременныйДляФайловВыгрузки);
Сообщить("Скопировал каталог src в cfxmltemp...");

ЗагрузкаКонфигурацииИзФайлов(_каталогВременныйДляФайловВыгрузки, КонфигураторТемп);
Сообщить("Загрузил из файлов...");
КонфигураторТемп.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь);
Сообщить("Обновил...");
КонфигураторТемп.ВыгрузитьКонфигурациюВФайл(_обновлениеКонфигурация);
Сообщить("Выгрузил в develop.cf...");

//создаем базу develop
КонфигураторРазраб = Новый УправлениеКонфигуратором();
КонфигураторРазраб.СоздатьФайловуюБазу(_каталогБазыРазработки);
Сообщить("Создал базу develop...");
КонфигураторРазраб.УстановитьКонтекст("/F"+_каталогБазыРазработки, "", "");
КонфигураторРазраб.ЗагрузитьИнформационнуюБазу(_установочнаяВыгрузкаБазы);
Сообщить("Загрузил setup.dt...");
КонфигураторРазраб.УстановитьКонтекст("/F"+_каталогБазыРазработки, "admin", "");
КонфигураторРазраб.СнятьКонфигурациюСПоддержки(Истина);
Сообщить("Снял с поддержки...");
КонфигураторРазраб.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь);
Сообщить("Обновил...");
КонфигураторРазраб.ОбъединитьКонфигурациюСФайлом(_обновлениеКонфигурация, _файлОбъединения, , , Истина);
Сообщить("Загружаю выборочно из develop.cf");
КонфигураторРазраб.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь);
Сообщить("Обновил...");
КонфигураторРазраб.ВыгрузитьКонфигурациюВФайл(_обновлениеКонфигурация);
Сообщить("Выгрузил в develop.cf...");

УдалитьФайлы(_каталогВременныйДляФайловВыгрузки);
Сообщить("Удалил каталог временных файлов выгрузки...");
УдалитьФайлы(_текущийКаталог, "*.txt");
Сообщить("Удалил временные *.txt в корне репо...");
Сообщить("Закончил...");

_итогЗамер = ТекущаяДата()-_началоЗамер;
Сообщить("Замер времени исполнения = "+Строка(_итогЗамер)+" сек.");
